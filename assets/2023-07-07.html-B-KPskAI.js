import{_ as l}from"./hero-CbGtQ2Lh.js";import{_ as s,r as a,o as r,c as h,b as e,d as t,e as o,a as i}from"./app-P3E1jSxo.js";const d={},c=i('<p><img src="'+l+'" alt="Logo"></p><h1 id="this-week-in-mojo-2023-07-07" tabindex="-1"><a class="header-anchor" href="#this-week-in-mojo-2023-07-07"><span>This Week in Mojo 2023-07-07</span></a></h1><h2 id="playground-update" tabindex="-1"><a class="header-anchor" href="#playground-update"><span>Playground Update</span></a></h2>',3),u={href:"https://docs.modular.com/mojo/changelog.html#july-2023",target:"_blank",rel:"noopener noreferrer"},m=i('<h3 id="‚≠êÔ∏è-new" tabindex="-1"><a class="header-anchor" href="#‚≠êÔ∏è-new"><span>‚≠êÔ∏è New</span></a></h3><ul><li>Tuple expressions now work without parentheses. For example <code>a, b = b, a</code> works as you‚Äôd expect in Python.</li><li>Chained assigments <code>a = b = 42</code> and the walrus operator <code>some_function(b := 17)</code> are now supported.</li></ul><h3 id="ü¶ã-changed" tabindex="-1"><a class="header-anchor" href="#ü¶ã-changed"><span>ü¶ã Changed</span></a></h3><ul><li><p>The <code>simd_width</code> and <code>dtype_simd_width</code> functions in the TargetInfo module have been renamed to <code>simdwidthof</code>.</p></li><li><p>The <code>dtype_</code> prefix has been dropped from <code>alignof</code>, <code>sizeof</code>, and <code>bitwidthof</code>. You can now use these functions with any argument type, including <code>DType</code>.</p></li><li><p>The <code>inf</code>, <code>neginf</code>, <code>nan</code>, <code>isinf</code>, <code>isfinite</code>, and <code>isnan</code> functions were moved from the Numerics module to the Math module, to better align with Python‚Äôs library structure.</p></li></ul><h3 id="üõ†Ô∏è-fixed" tabindex="-1"><a class="header-anchor" href="#üõ†Ô∏è-fixed"><span>üõ†Ô∏è Fixed</span></a></h3>',5),p={href:"https://github.com/modularml/mojo/issues/253",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/modularml/mojo/issues/404",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/modularml/mojo/issues/379",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/modularml/mojo/issues/347",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/modularml/mojo/issues/320",target:"_blank",rel:"noopener noreferrer"},w=e("h2",{id:"community-content",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#community-content"},[e("span",null,"Community Content")])],-1),y={href:"https://mikeinnes.io",target:"_blank",rel:"noopener noreferrer"},k={href:"https://mikeinnes.io/2023/06/06/mojo",target:"_blank",rel:"noopener noreferrer"},v=e("h2",{id:"mojo-team-answers",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mojo-team-answers"},[e("span",null,"Mojo Team Answers")])],-1),j=e("h3",{id:"using-async-fn",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#using-async-fn"},[e("span",null,[t("Using "),e("code",null,"async fn")])])],-1),x=e("p",null,"async fn and coroutines are a fairly powerful mechanism, and though at this time the only public way we're exposing to invoke them is directly on the same thread, the underlying mechanism is quite powerful and allows running in thread pools, etc. However, for the time being, you'll have to use our wrappers like parallelize, as the underlying functionality isn't otherwise public right now.",-1),T={href:"https://discord.com/channels/1087530497313357884/1126917199551012874/1126961335423483924",target:"_blank",rel:"noopener noreferrer"},z=e("h3",{id:"ml-compiler-optimization-projects",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ml-compiler-optimization-projects"},[e("span",null,"ML Compiler optimization projects")])],-1),I=e("p",null,"We believe that programmability and extensibility is actually the problem to be solved here, not just providing yet-another-special-case-ml-compiler",-1),M={href:"https://discord.com/channels/1087530497313357884/1103420074372644916/1125842233875243008",target:"_blank",rel:"noopener noreferrer"},C=e("h3",{id:"wasm-target",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#wasm-target"},[e("span",null,"WASM Target")])],-1),A=e("p",null,"Our first downloadable deliverable won't support WASM. This is a super interesting target for sure, but we're prioritizing getting things out with a first release, rather than blocking until we solve all the problems üôÇ",-1),D={href:"https://discord.com/channels/1087530497313357884/1125837200748199988/1125837669964972125",target:"_blank",rel:"noopener noreferrer"},L=e("h3",{id:"autoderef",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#autoderef"},[e("span",null,"Autoderef")])],-1),S=e("p",null,[t("The weirder thing to me about the rust approach with "),e("code",null,"autoderef"),t(" is how it handles smart pointers etc. The safe default is to start without "),e("code",null,"autoderef"),t(` and we can see what that does for ergonomics of the resultant libraries. Any time there has to be a stumper "quiz" about a language feature, it is a sign there is something wrong üòÄ. In Rust, allowing impl traits on borrows themselves is "interesting". I'm not sure about why that was chosen vs just allowing nominal types to implement traits, but there is probably a good reason.`)],-1),N={href:"https://discord.com/channels/1087530497313357884/1125597373956116492/1125832654584029204",target:"_blank",rel:"noopener noreferrer"},U=e("h3",{id:"init-uninitialized-objects-in-fn",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#init-uninitialized-objects-in-fn"},[e("span",null,[t("Init uninitialized objects in "),e("code",null,"fn")])])],-1),W=e("p",null,[t("This is effectively how the Mojo compiler works internally, and we fudge a couple of things for sake of simplicity of model. For example, the "),e("code",null,"self"),t(" member of a "),e("code",null,"__del__"),t(' destructor is a reference, but it is "magic" in that it is required to be live-in and uninit-out. The self for a memory-only '),e("code",null,"__init__"),t(" has the opposite polarity, being uninit on entry and init on exit.")],-1),P={href:"https://github.com/modularml/mojo/issues/372#issuecomment-1619181242",target:"_blank",rel:"noopener noreferrer"},F=e("h3",{id:"multiple-moves-with",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#multiple-moves-with"},[e("span",null,[t("Multiple Moves with "),e("code",null,"^")])])],-1),V=e("p",null,[t("The "),e("code",null,"^"),t(" operator kills a lifetime or invokes the stealing moveinit, producing a new owned RValue, so "),e("code",null,"^^^"),t(" is just repeatedly moving üôÇ. It is probably a noop in the implementation because we do move elision, I haven't checked though.")],-1),q={href:"https://discord.com/channels/1087530497313357884/1098713601386233997/1125596235882041464",target:"_blank",rel:"noopener noreferrer"},B=e("h3",{id:"docs-internationalization",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docs-internationalization"},[e("span",null,"Docs Internationalization")])],-1),E=e("p",null,"We have no plans to translate our content at this time or in the near future. Our products and documentation are still in their infancy and there's a long way to go before curated translation becomes a priority.",-1),G={href:"https://github.com/modularml/mojo/issues/163#issuecomment-1613642961",target:"_blank",rel:"noopener noreferrer"},O=e("h3",{id:"string-uint8-implementation",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#string-uint8-implementation"},[e("span",null,"String UInt8 implementation")])],-1),R=e("p",null,[t("It makes sense to use "),e("code",null,"UInt8"),t(" instead of "),e("code",null,"Int8"),t(", although users should not be working directly with the bytes within a string üòÄ. Also, we try to match C semantics here which uses "),e("code",null,"char *"),t(" for strings. There is a plan to perform optimizations on strings for example small string optimizations, so you should never depend on its layout.")],-1),H={href:"https://github.com/modularml/mojo/issues/420#issuecomment-1615472005",target:"_blank",rel:"noopener noreferrer"};function J(K,Y){const n=a("ExternalLinkIcon");return r(),h("div",null,[c,e("p",null,[e("a",u,[t("Full Changelog Here"),o(n)])]),m,e("ul",null,[e("li",null,[e("p",null,[e("a",p,[t("Issue #253"),o(n)]),t(" Issue when accessing a struct member alias without providing parameters.")])]),e("li",null,[e("p",null,[e("a",g,[t("Issue #404"),o(n)]),t(": The docs now use snake_case for variable names, which more closely conforms to Python‚Äôs style.")])]),e("li",null,[e("p",null,[e("a",f,[t("Issue #379"),o(n)]),t(": Tuple limitations have been addressed and multiple return values are now supported, even without parentheses.")])]),e("li",null,[e("p",null,[e("a",_,[t("Issue #347"),o(n)]),t(": Tuples no longer require parentheses.")])]),e("li",null,[e("p",null,[e("a",b,[t("Issue #320"),o(n)]),t(": Python objects are now traversable via for loops.")])])]),w,e("ul",null,[e("li",null,[e("a",y,[t("Mike Innes"),o(n)]),t(" wrote a blog post: "),e("a",k,[t("Finding you Mojo"),o(n)])])]),v,j,x,e("ul",null,[e("li",null,[e("a",T,[t("2023-07-08 Discord Alex Kirchhoff"),o(n)])])]),z,I,e("ul",null,[e("li",null,[e("a",M,[t("2023-07-09 Discord Chris Lattner"),o(n)])])]),C,A,e("ul",null,[e("li",null,[e("a",D,[t("2023-07-05 Discord Chris Lattner"),o(n)])])]),L,S,e("ul",null,[e("li",null,[e("a",N,[t("2023-07-05 Discord Chris Lattner"),o(n)])])]),U,W,e("ul",null,[e("li",null,[e("a",P,[t("2023-07-04 Github Chris Lattner"),o(n)])])]),F,V,e("ul",null,[e("li",null,[e("a",q,[t("2023-07-04 Discord Chris Lattner"),o(n)])])]),B,E,e("ul",null,[e("li",null,[e("a",G,[t("2023-06-30 Github Scott Main"),o(n)])])]),O,R,e("ul",null,[e("li",null,[e("a",H,[t("2023-07-02 Github Abdul Dakkak"),o(n)])])])])}const X=s(d,[["render",J],["__file","2023-07-07.html.vue"]]),$=JSON.parse('{"path":"/this-week-in-mojo/2023-07-07.html","title":"This Week in Mojo 2023-07-07","lang":"en-US","frontmatter":{"date":"2023-07-07T00:00:00.000Z","author":"Mojo Dojo","author_site":"https://mojodojo.dev","author_image":"https://mojodojo.dev/hero.png","feed":true,"head":[["meta",{"name":"twitter:card","content":"summary"}],["meta",{"name":"twitter:site","content":"@mojodojodev"}],["meta",{"name":"twitter:title","content":"This Week in Mojo"}],["meta",{"name":"twitter:description","content":"This week in Mojo with language updates, community content, and everything else related to Mojo"}],["meta",{"name":"twitter:image","content":"https://mojodojo.dev/hero.png"}]]},"headers":[{"level":2,"title":"Playground Update","slug":"playground-update","link":"#playground-update","children":[{"level":3,"title":"‚≠êÔ∏è New","slug":"‚≠êÔ∏è-new","link":"#‚≠êÔ∏è-new","children":[]},{"level":3,"title":"ü¶ã Changed","slug":"ü¶ã-changed","link":"#ü¶ã-changed","children":[]},{"level":3,"title":"üõ†Ô∏è Fixed","slug":"üõ†Ô∏è-fixed","link":"#üõ†Ô∏è-fixed","children":[]}]},{"level":2,"title":"Community Content","slug":"community-content","link":"#community-content","children":[]},{"level":2,"title":"Mojo Team Answers","slug":"mojo-team-answers","link":"#mojo-team-answers","children":[{"level":3,"title":"Using async fn","slug":"using-async-fn","link":"#using-async-fn","children":[]},{"level":3,"title":"ML Compiler optimization projects","slug":"ml-compiler-optimization-projects","link":"#ml-compiler-optimization-projects","children":[]},{"level":3,"title":"WASM Target","slug":"wasm-target","link":"#wasm-target","children":[]},{"level":3,"title":"Autoderef","slug":"autoderef","link":"#autoderef","children":[]},{"level":3,"title":"Init uninitialized objects in fn","slug":"init-uninitialized-objects-in-fn","link":"#init-uninitialized-objects-in-fn","children":[]},{"level":3,"title":"Multiple Moves with ^","slug":"multiple-moves-with","link":"#multiple-moves-with","children":[]},{"level":3,"title":"Docs Internationalization","slug":"docs-internationalization","link":"#docs-internationalization","children":[]},{"level":3,"title":"String UInt8 implementation","slug":"string-uint8-implementation","link":"#string-uint8-implementation","children":[]}]}],"filePathRelative":"this-week-in-mojo/2023-07-07.md","git":{"createdTime":1692819390000,"updatedTime":1692819390000}}');export{X as comp,$ as data};
