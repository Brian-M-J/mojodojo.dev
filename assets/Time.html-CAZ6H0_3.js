import{_ as n,r as a,o as e,c as o,e as l,a as p}from"./app-P3E1jSxo.js";const t={},c=p(`<h1 id="time" tabindex="-1"><a class="header-anchor" href="#time"><span>Time</span></a></h1><div class="language-mojo" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Time </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> now</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> sleep</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> time_function</span></span>
<span class="line"></span></code></pre></div><h2 id="now" tabindex="-1"><a class="header-anchor" href="#now"><span>now</span></a></h2><p>Gets the current nanoseconds using the systems monotonic clock, which is generally the time elapsed since the machine was booted, but will vary behaviour by platform for states like <code>sleep</code> etc.</p><div class="language-mojo" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">now</span><span style="color:#9ABDF5;">())</span></span>
<span class="line"></span></code></pre></div><pre><code>276729993584072
</code></pre><h2 id="sleep" tabindex="-1"><a class="header-anchor" href="#sleep"><span>sleep</span></a></h2><p>Make a thread sleep for the duration in seconds</p><div class="language-mojo" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> tic</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> now</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#7AA2F7;">sleep</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">.001</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> toc</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> now</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;"> -</span><span style="color:#A9B1D6;"> tic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">slept for</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> toc</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">nanoseconds</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre></div><pre><code>slept for 1062234 nanoseconds
</code></pre><h2 id="time-function" tabindex="-1"><a class="header-anchor" href="#time-function"><span>time_function</span></a></h2><p>Pass in a nested <code>fn</code> a.k.a <code>closure</code> that takes no arguments and returns <code>None</code> as a parameter, e.g. to time a function named <code>sleep1ms</code>:</p><div class="language-mojo" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;">fn</span><span style="color:#7AA2F7;"> sleep1ms</span><span style="color:#9ABDF5;">():</span></span>
<span class="line"><span style="color:#7AA2F7;">    sleep</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">.001</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BB9AF7;">fn</span><span style="color:#7AA2F7;"> measure</span><span style="color:#9ABDF5;">():</span></span>
<span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#7AA2F7;"> closure</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#FF9E64;"> None</span><span style="color:#9ABDF5;">:</span></span>
<span class="line"><span style="color:#7AA2F7;">        sleep1ms</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    let</span><span style="color:#C0CAF5;"> nanos</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> time_function</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">closure</span><span style="color:#9ABDF5;">]()</span></span>
<span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">sleeper took</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> nanos</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">nanoseconds to run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7AA2F7;">measure</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"></span></code></pre></div><pre><code>sleeper took 1060233 nanoseconds to run
</code></pre>`,14);function r(i,d){const s=a("CommentService");return e(),o("div",null,[c,l(s)])}const F=n(t,[["render",r],["__file","Time.html.vue"]]),D=JSON.parse('{"path":"/guides/std/Time.html","title":"Time","lang":"en-US","frontmatter":{"title":"Time","categories":"Time","usage":"Measure elapsed time and make a thread sleep"},"headers":[{"level":2,"title":"now","slug":"now","link":"#now","children":[]},{"level":2,"title":"sleep","slug":"sleep","link":"#sleep","children":[]},{"level":2,"title":"time_function","slug":"time-function","link":"#time-function","children":[]}],"filePathRelative":"guides/std/Time.md","git":{"createdTime":1692819390000,"updatedTime":1692819390000}}');export{F as comp,D as data};
